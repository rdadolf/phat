#include <string>
#include "json.hh"
#include "paxos.hh"

namespace phat {

////////////////////////////////////////////////////////////////////////////////

class Phat_Server
{
private:
  bool i_am_master_;
  tamer::event <> elect_me_;
  typedef enum { FILE=1, DIR } Filetype_t;
  int listen_port_;
  int paxos_port_;
  int paxos_master_;
  msgpack_fd paxm_mpfd_;
  std::vector<int> paxi_;

  Json fs_image_; // ALL DATA EVER.
  Json root;
  Json* traverse_files(Json& root, Json path);
public:
  Phat_Server();
  Phat_Server(int port);
  Phat_Server(int port, int paxos, int pm);

  tamed void run_master_server();
  tamed void get_paxos_group(tamer::event<> ev);
  void run_replica_server();

  // Utility functions
  tamed void handle_new_connections(int port);
  tamed void read_and_dispatch(tamer::fd client);
  tamed void connect(String hostname, int port,tamer::event<msgpack_fd> ev);

  // Internal service routines
  Json get_master(Json args);
  Json get_replica_list(Json args);

  // Service routines
  void fs_init();
  Json getroot(Json args);
  Json open(const char* subpath);
  Json mkfile(Json args);
  Json mkdir(Json args);
  Json getcontents(Json args);
  Json putcontents(Json args);
  Json readdir(Json args);
  Json stat(Json args);
  Json remove(Json args);
  // FIXME implement the rest...

};


} // namespace phat
